generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  username    String
  session     Session[]
  customer    Customer[]
  service     Service[]
  transaction Transaction[]
  product     Product[]

  @@map("users")
}

model Session {
  id       Int       @id @default(autoincrement())
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  token    String
  loginAt  DateTime  @default(now())
  logoutAt DateTime?

  @@map("sessions")
}

model Customer {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  name          String
  establishment String?
  address       String?
  createAt      DateTime       @default(now())
  deleteAt      DateTime?
  phoneNumbers  PhoneNumbers[]

  @@map("customers")
}

model PhoneNumbers {
  id           Int      @id @default(autoincrement())
  customerId   Int      @unique
  customer     Customer @relation(fields: [customerId], references: [id])
  phoneNumber1 String?
  phoneNumber2 String?
  phoneNumber3 String?

  @@map("phoneNumbers")
}

model Service {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  name        String
  value       Int
  description String?
  createAt    DateTime @default(now())
  deleteAt    DateTime?

  @@map("services")
}

model Product {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  name        String
  value       Int
  description String?
  amount      Int      @default(0)
  createAt    DateTime @default(now())
  deleteAt    DateTime?

  @@map("products")
}

model Transaction {
  id          Int              @id @default(autoincrement())
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  description String
  value       Int
  type        TransactionTypes
  paymentAt   DateTime         @default(now())
  deleteAt    DateTime?

  @@map("transactions")
}

enum TransactionTypes {
  payment
  receipt
}
